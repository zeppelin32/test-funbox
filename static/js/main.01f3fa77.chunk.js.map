{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Package","props","description","title","name","portion","mice","customerSatisfied","weight","capture","disable","useState","chosen","setChosen","active","setActive","className","onClick","onMouseLeave","event","App","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sKAGMA,G,MAAU,SAACC,GAAW,IACnBC,EAAwFD,EAAxFC,YAAaC,EAA2EF,EAA3EE,MAAOC,EAAoEH,EAApEG,KAAMC,EAA8DJ,EAA9DI,QAASC,EAAqDL,EAArDK,KAAMC,EAA+CN,EAA/CM,kBAAmBC,EAA4BP,EAA5BO,OAAQC,EAAoBR,EAApBQ,QAASC,EAAWT,EAAXS,QAD3D,EAGGC,oBAAS,GAHZ,mBAGlBC,EAHkB,KAGVC,EAHU,OAIGF,oBAAS,GAJZ,mBAIlBG,EAJkB,KAIVC,EAJU,KAMzB,OACE,oCACE,yBAAKC,UAAU,iBACb,yBACEA,UAAS,kBAAaF,EAAS,SAAW,UAAjC,YAA8CJ,EAAU,UAAY,GAApE,KACTO,QAAS,WACFP,GACHG,GAAWD,IAGfM,aAAc,SAACC,GAEXJ,IADEH,KAON,yBAAKI,UAAU,wBAAwBd,GAAe,gJACtD,yBAAKc,UAAU,kBAAkBb,GAAS,8CAC1C,yBAAKa,UAAU,qBAAf,iBAAyCZ,IACzC,yBAAKY,UAAU,qBACb,yBAAKA,UAAU,wBAAf,UAA0CX,EAA1C,0CACA,yBAAKW,UAAU,wBAAf,UAA0CV,EAA1C,uDACCC,GACC,yBAAKS,UAAU,wBAAf,gGAGJ,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,mBACZR,EACD,+CAIJ,yBAAKQ,UAAU,WACZJ,GAAUF,EACT,oCACGD,GAGH,0KAEE,4BACEO,UAAU,UACVC,QAAS,WACFP,IACHG,GAAWD,GACXG,GAAWD,MALjB,gCAUA,0BAAME,UAAU,eAAhB,WAmDCI,MAxCf,WACE,OACE,oCACE,6BAASJ,UAAU,QACjB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,eAAd,sIACA,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CACEK,KAAM,EACNjB,KAAK,wCACLC,QAAS,GACTC,KAAK,2BACLE,OAAO,MACPC,QAAQ,yOAEV,kBAAC,EAAD,CACEY,KAAM,EACNjB,KAAK,iCACLC,QAAS,GACTC,KAAK,6BACLE,OAAO,IACPC,QAAQ,sPAEV,kBAAC,EAAD,CACEC,SAAO,EACPN,KAAK,iCACLC,QAAS,IACTC,KAAK,mCACLC,mBAAiB,EACjBC,OAAO,IACPC,QAAQ,+J,MC3FFa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.01f3fa77.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport 'sass/style.css'\n\nconst Package = (props) => {\n  const {description, title, name, portion, mice, customerSatisfied, weight, capture, disable} = props;\n\n  const [chosen, setChosen] = useState(false);\n  const [active, setActive] = useState(false);\n\n  return (\n    <>\n      <div className=\"package-inner\">\n        <div\n          className={`package ${active ? 'active' : 'default'} ${disable ? 'disable' : ''} `}\n          onClick={() => {\n            if (!disable) {\n              setChosen(!chosen);\n            }\n          }}\n          onMouseLeave={(event) => {\n            if (chosen) {\n              setActive(true);\n            } else {\n              setActive(false);\n            }\n          }}\n        >\n          <div className=\"package__description\">{description || \"Сказочное заморское яство\"}</div>\n          <div className=\"package__title\">{title || \"Нямушка\"}</div>\n          <div className=\"package__subtitle\">{`с ${name}`}</div>\n          <div className=\"package__detailed\">\n            <div className=\"package-detail__item\">{`${portion} порций`}</div>\n            <div className=\"package-detail__item\">{`${mice} в подарок`}</div>\n            {customerSatisfied && (\n              <div className=\"package-detail__item\">заказчик доволен</div>\n            )}\n          </div>\n          <div className=\"package__img\"/>\n          <div className=\"package__weight\">\n            {weight}\n            <div>кг</div>\n          </div>\n\n        </div>\n        <div className=\"capture\">\n          {chosen || disable ? (\n            <>\n              {capture}\n            </>\n          ) : (\n            <>\n              Чего сидишь? Порадуй котэ,\n              <button\n                className=\"btn-buy\"\n                onClick={() => {\n                  if (!disable) {\n                    setChosen(!chosen);\n                    setActive(!active);\n                  }\n                }}>\n                &nbsp;купи\n              </button>\n              <span className=\"capture-dot\">.</span>\n            </>\n          )}\n        </div>\n      </div>\n\n\n    </>\n  )\n}\n\nfunction App() {\n  return (\n    <>\n      <section className=\"main\">\n        <div className=\"container\">\n          <h1 className=\"main__title\">Ты сегодня покормил кота?</h1>\n          <div className=\"main__content\">\n            <Package\n              type={1}\n              name=\"фуа-гра\"\n              portion={10}\n              mice=\"мышь\"\n              weight=\"0,5\"\n              capture=\"Вкуснейшая фуа-грушка с Карибских островов.\"\n            />\n            <Package\n              type={2}\n              name=\"рыбой\"\n              portion={40}\n              mice=\"2 мыши\"\n              weight=\"2\"\n              capture=\"Головы щучьи с чесноком да свежайшая сёмгушка.\"\n            />\n            <Package\n              disable\n              name=\"курой\"\n              portion={100}\n              mice=\"5 мышей\"\n              customerSatisfied\n              weight=\"5\"\n              capture=\"Печалька, с курой закончился.\"\n            />\n          </div>\n        </div>\n\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'react-app-polyfill/ie11';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}